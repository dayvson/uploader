TO SEE THIS PROJECT ONLINE
http://max.comum.org:8888/


INSTALLATION:
How to for installation and for running this project

TORNADO FRAMEWORK:
Automatic installation: Tornado is listed in PyPI and can be installed with pip or easy_install. Note that the source distribution includes demo applications that are not present when Tornado is installed in this way, so you may wish to download a copy of the source tarball as well.

PIP installation: 
<pre>
pip install tornado 
</pre>

CONFIGURATION:
Create a new configuration file based on the uploader.conf.sample and call him uploader.conf
Edit as you wish:
[http]
debug = true
host = 0.0.0.0
port = 8888
upload_files_dir = /Users/dayvson/uploader/data/
template_dir = templates
static_dir = /Users/dayvson/uploader/app/static/


STANDARD/CLEAN CODE:
Why I believe in consistency and style guide is about that 
This code following PEP8 style guide for Python code. 
http://www.python.org/dev/peps/pep-0008/


TESTS:

CLIENT SIDE:
I did some tests to this prototype for client side using Jasmine framework, 
it does make test javascript really fun
https://jasmine.github.io/ (see more on jasmine page)
I didn't create any script to run my jasmine tests but (normally I do it)
For run this tests open SpecRunner.html(test/javascript/SpecRunner.html) file on browser and see the results


SERVER SIDE:

*Splinter is a tool for test web applications with a simple for find elements, form actions, and others browser actions.
I used splinter to make some acceptances tests you can check it out on uploader_webdriver.py
<pre>
git clone https://github.com/cobrateam/splinter.git
cd splinter
sudo make install
</pre>

To run the tests open two shell screens:
In the first one run the application
<pre>make</pre>
In the second one run the tests
<pre> make test </pre>


RUNNING APPLICATION:
You can run this project using makefile
<pre>make </pre>


EXTRA NOTES:

Let me explain my solution:

How does it works?

The server side captures de the user's request and then reads the file's byte stream asynchronously and increases the amount of BYTES_LOADED in a dictionary. I use this dictionary at '/progress' route. Each upload receives a key to be used as an identifier. I'll use this key at '/progress' route to make it work on old browsers.

I had to extend the HTTPConection class to implement a stream-based reader of the request body. I had to do this because Tornado reads the entire request and stores it at server's memory by default.


CLIENT SIDE:

I implemented the client side solution without any frameworks like jQuery or Mootools.
Particularly, I would prefer to one of these frameworks in an usual job, but I haven't done it to show my javascript skills.

The solution is:
If the browser supports upload via XHR2 (HTML5 - http://www.w3.org/TR/XMLHttpRequest) then I use XHR because the client knows how much data was sent to the server, so we can calculate the upload progress on client side.

Otherwise I do the upload using POST FORM + HIDDEN IFRAME (to old browsers like Firefox 3 or IE7+). In this case I did XHR Pooling to make a request for the  '/progress?UploadKey=UUID' route each second and that route returns information about upload progress till the upload finish.
